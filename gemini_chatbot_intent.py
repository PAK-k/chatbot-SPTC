import google.generativeai as genai
import json
import requests
from datetime import datetime, timedelta
import pandas as pd
import os
import pandas as pd

genai.configure(api_key="AIzaSyB8d5o2veAopoa5FlcVxKqm3z8LNkP19Zk")
model = genai.GenerativeModel('models/gemini-2.0-flash')
chat = model.start_chat()

def extract_important_info(url, html_content, city=None):
    if "nghiphep/history" in url.lower():
        return {
            "type": "link",
            "url": url,
            "title": "üìã Xem l·ªãch s·ª≠ ngh·ªâ ph√©p",
            "message":
                """üìä T·∫°i trang l·ªãch s·ª≠ ngh·ªâ ph√©p, b·∫°n s·∫Ω th·∫•y:
- Danh s√°ch t·∫•t c·∫£ ƒë∆°n ngh·ªâ ph√©p ƒë√£ g·ª≠i
- Th·ªùi gian v√† s·ªë ng√†y ngh·ªâ c·ªßa t·ª´ng ƒë∆°n
- Tr·∫°ng th√°i ph√™ duy·ªát (ƒê√£ duy·ªát/ƒêang ch·ªù/T·ª´ ch·ªëi)
- Ng∆∞·ªùi ph√™ duy·ªát v√† th·ªùi gian ph√™ duy·ªát
                """
        }
    elif "nghiphep/balance" in url.lower():
        return {
            "type": "link",
            "url": url,
            "title": "üóìÔ∏è Xem s·ªë ng√†y ngh·ªâ c√≤n l·∫°i",
            "message":
                """üìÖ Th√¥ng tin s·ªë ng√†y ngh·ªâ:
- T·ªïng s·ªë ng√†y ngh·ªâ ph√©p nƒÉm
- S·ªë ng√†y ƒë√£ s·ª≠ d·ª•ng
- S·ªë ng√†y c√≤n l·∫°i
- Th·ªëng k√™ theo lo·∫°i ngh·ªâ ph√©p
                """
        }
    elif "project/progress" in url:
        try:
            data = json.loads(html_content)
            return f"""
üìä T√™n d·ª± √°n: {data.get('project_name', 'N/A')}
üìà Ti·∫øn ƒë·ªô: {data.get('progress', '0')}%
‚è∞ Deadline: {data.get('deadline', 'N/A')}
üìå Tr·∫°ng th√°i: {data.get('status', 'N/A')}
""".strip()
        except:
            return html_content
    elif "salary" in url:
        try:
            data = json.loads(html_content)
            return f"""
üí∞ L∆∞∆°ng c∆° b·∫£n: {int(data.get('base_salary', 0)):,} VND
üéÅ Th∆∞·ªüng: {int(data.get('bonus', 0)):,} VND
üíµ T·ªïng thu nh·∫≠p: {int(data.get('total', 0)):,} VND
üìÖ K·ª≥ l∆∞∆°ng: {data.get('period', 'N/A')}
""".strip()
        except:
            return html_content
    return html_content

def call_real_api(api_url, user_input=None):
    try:
        response = requests.get(api_url, timeout=5)
        if response.status_code == 200:
            return extract_important_info(api_url, response.text)
        else:
            return f"‚ùå L·ªói {response.status_code}: {response.text}"
    except Exception as e:
        return f"‚ùå L·ªói khi g·ªçi API: {str(e)}"

def get_response(prompt):
    try:
        response = chat.send_message(prompt)
        return response.text.strip() if response.text else ""
    except Exception as e:
        print(f"L·ªói khi g·ªçi Gemini: {str(e)}")
        return "Error: Unable to get response from AI."

def clean_response(response):
    if not response:
        return ""
    response = response.strip()
    if response.startswith('```') and response.endswith('```'):
        response = response[3:-3]
    if response.lower().startswith('json'):
        response = response[4:]
    return response.strip()

def export_payslip(month):
    try:
        url = f"https://mbi.sapotacorp.vn/api/UserAPI/OutputExcelPayslip"
        headers = {
            "accept": "application/json, text/plain, */*",
            "authorization": "michael##Hamia*10124##4",
            "cache-control": "no-cache",
            "pragma": "no-cache",
            "referer": "https://mbi.sapotacorp.vn/User/Payslip"
        }
        params = {
            "month": f"{month}-01T00:00:00"
        }
        response = requests.get(url, params=params, headers=headers)

        if response.status_code == 200:
            response_text = response.text.strip()
            if response_text:
                if response_text.startswith('"') and response_text.endswith('"'):
                    response_text = response_text[1:-1]

                download_url = f"https://mbi.sapotacorp.vn{response_text}"
                print(f"Constructed download URL: {download_url}")
                return {"success": True, "download_url": download_url}
            else:
                return {"success": False, "message": "API ph·∫£n h·ªìi th√†nh c√¥ng (200 OK) nh∆∞ng n·ªôi dung tr·ªëng."}
        else:
            return {"success": False, "message": f"L·ªói t·ª´ API xu·∫•t file: {response.status_code} - {response.text}"}

    except Exception as e:
        return {"success": False, "message": f"L·ªói k·∫øt n·ªëi ho·∫∑c x·ª≠ l√Ω khi g·ªçi API xu·∫•t file: {str(e)}"}

def get_working_hours(date):
    if date.weekday() >= 5:
        return None

    morning_start = datetime.combine(date.date(), datetime.strptime("08:30", "%H:%M").time())
    morning_end = datetime.combine(date.date(), datetime.strptime("12:00", "%H:%M").time())

    afternoon_start = datetime.combine(date.date(), datetime.strptime("13:30", "%H:%M").time())
    afternoon_end = datetime.combine(date.date(), datetime.strptime("17:30", "%H:%M").time())

    return {
        "morning": (morning_start, morning_end),
        "afternoon": (afternoon_start, afternoon_end)
    }

def calculate_leave_hours(from_date, to_date):
    if not from_date or not to_date:
        return 0

    try:
        start = datetime.strptime(from_date, "%m %d %Y %H:%M")
        end = datetime.strptime(to_date, "%m %d %Y %H:%M")

        if end < start:
            return 0

        total_hours = 0
        current = start

        while current.date() <= end.date():
            working_hours = get_working_hours(current)

            if working_hours:
                morning_start, morning_end = working_hours["morning"]
                afternoon_start, afternoon_end = working_hours["afternoon"]

                if current.date() == start.date():
                    morning_start = max(morning_start, start)
                if current.date() == end.date():
                    morning_end = min(morning_end, end)

                if morning_start < morning_end:
                    total_hours += (morning_end - morning_start).total_seconds() / 3600

                if current.date() == start.date():
                    afternoon_start = max(afternoon_start, start)
                if current.date() == end.date():
                    afternoon_end = min(afternoon_end, end)

                if afternoon_start < afternoon_end:
                    total_hours += (afternoon_end - afternoon_start).total_seconds() / 3600

            current += timedelta(days=1)

        return int(round(total_hours))
    except Exception as e:
        print(f"Error calculating leave hours: {str(e)}")
        return 0

def find_header_row(file_path, required_columns, max_rows_to_check=20):
    """
    T√¨m d√≤ng header (index b·∫Øt ƒë·∫ßu t·ª´ 0) ch·ª©a ƒë·∫ßy ƒë·ªß c√°c c·ªôt b·∫Øt bu·ªôc
    """
    engine = 'openpyxl' if file_path.lower().endswith('.xlsx') else 'xlrd'
    try:
        preview_df = pd.read_excel(file_path, engine=engine, header=None, nrows=max_rows_to_check)
    except Exception as e:
        raise ValueError(f"Kh√¥ng th·ªÉ ƒë·ªçc file Excel ƒë·ªÉ d√≤ d√≤ng ti√™u ƒë·ªÅ: {e}")
    
    for i in range(len(preview_df)):
        row_values = preview_df.iloc[i].astype(str).str.strip().str.upper().tolist()
        if all(any(req_col in val for val in row_values) for req_col in required_columns):
            return i
    return None

def read_excel_tasks(file_path):
    """
    ƒê·ªçc danh s√°ch task t·ª´ file Excel
    """
    try:
        # ƒê·ªçc file Excel ƒë·ªÉ t√¨m d√≤ng ti√™u ƒë·ªÅ
        print("B·∫Øt ƒë·∫ßu ƒë·ªçc file Excel...")
        
        # ƒê·ªçc 20 d√≤ng ƒë·∫ßu ti√™n ƒë·ªÉ t√¨m d√≤ng ti√™u ƒë·ªÅ
        df_header = pd.read_excel(file_path, nrows=20)
        
        # T√¨m d√≤ng ti√™u ƒë·ªÅ
        header_row = find_header_row(file_path, ['M√É D·ª∞ √ÅN', 'M√É DEV'])
        if not header_row:
            return {
                "success": False,
                "message": "Kh√¥ng t√¨m th·∫•y d√≤ng ti√™u ƒë·ªÅ trong file Excel"
            }
            
        print(f"ƒê√£ t√¨m th·∫•y d√≤ng ti√™u ƒë·ªÅ ·ªü d√≤ng s·ªë {header_row + 1} (index: {header_row})")
        
        # ƒê·ªçc l·∫°i file v·ªõi d√≤ng ti√™u ƒë·ªÅ ƒë√£ t√¨m ƒë∆∞·ª£c
        df_header = pd.read_excel(file_path, header=header_row)
        
        # In ra c√°c c·ªôt ƒë·ªçc ƒë∆∞·ª£c ƒë·ªÉ debug
        print("C√°c c·ªôt ƒë·ªçc ƒë∆∞·ª£c t·ª´ file Excel (g·ªëc -> chu·∫©n h√≥a):", {col: col.upper() for col in df_header.columns})
        
        # Chu·∫©n h√≥a t√™n c·ªôt
        original_columns = {col: col.upper() for col in df_header.columns}
        
        # √Ånh x·∫° t√™n c·ªôt chu·∫©n h√≥a v·ªõi t√™n ti·∫øng Anh v√† ch·ªâ m·ª•c
        standardized_mapping_and_index = {
            'M√É D·ª∞ √ÅN': {'english_name': 'project_id', 'index': None},
            'M√É DEV': {'english_name': 'dev_id', 'index': None}
        }
        
        found_columns = {}
        found_column_indices = {}
        missing_required_original_columns = []
        
        # T√¨m t·ª´ng c·ªôt c·∫ßn thi·∫øt
        for standard_col in ['M√É D·ª∞ √ÅN', 'M√É DEV']:
            for original_col_name, standardized_name in original_columns.items():
                if standardized_name == standard_col:
                    found_columns[standardized_mapping_and_index[standard_col]['english_name']] = original_col_name
                    col_index = df_header.columns.get_loc(original_col_name)
                    found_column_indices[standardized_mapping_and_index[standard_col]['english_name']] = col_index
                    standardized_mapping_and_index[standard_col]['index'] = col_index
                    break
            else:
                missing_required_original_columns.append(standard_col)
                
        if missing_required_original_columns:
            return {
                "success": False,
                "message": f"File Excel thi·∫øu c√°c c·ªôt b·∫Øt bu·ªôc: {', '.join(missing_required_original_columns)}"
            }
            
        print(f"ƒê√£ t√¨m th·∫•y ch·ªâ m·ª•c c√°c c·ªôt c·∫ßn thi·∫øt: {found_column_indices}")
        
        # ƒê·ªçc d·ªØ li·ªáu ch√≠nh t·ª´ file, b·ªè qua 6 h√†ng ƒë·∫ßu (tr∆∞·ªõc d·ªØ li·ªáu) v√† ch·ªâ ƒë·ªçc c√°c c·ªôt c·∫ßn thi·∫øt b·∫±ng ch·ªâ m·ª•c
        print("B·ªè qua 6 h√†ng ƒë·∫ßu ti√™n (skiprows=6) v√† ƒë·ªçc d·ªØ li·ªáu t·ª´ c√°c ch·ªâ m·ª•c c·ªôt ƒë√£ x√°c ƒë·ªãnh.")
        
        cols_by_index = sorted(found_column_indices.values())
        print(f"Ch·ªâ m·ª•c c·ªôt s·∫Ω s·ª≠ d·ª•ng ƒë·ªÉ ƒë·ªçc d·ªØ li·ªáu: {cols_by_index}")
        
        if file_path.lower().endswith('.xlsx'):
            # Khi d√πng skiprows v√† usecols b·∫±ng index, pandas ƒë·ªçc data t·ª´ h√†ng skiprows + 1
            df = pd.read_excel(file_path, engine='openpyxl', skiprows=6, usecols=cols_by_index, header=None, dtype={0: str, 1: str})
        else:
            df = pd.read_excel(file_path, engine='xlrd', skiprows=6, usecols=cols_by_index, header=None, dtype={0: str, 1: str})
            
        print("Raw DataFrame after skiprows and usecols:")
        print(df)
        
        # ƒê·ªïi t√™n c·ªôt ƒë·ªÉ d·ªÖ x·ª≠ l√Ω
        df.columns = ['project_id', 'dev_id']
        
        # L·ªçc b·ªè c√°c d√≤ng c√≥ gi√° tr·ªã NaN
        df = df.dropna()
        
        # Th√™m s·ªë th·ª© t·ª± cho m·ªói task
        df['index'] = range(1, len(df) + 1)
        
        # Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu th√†nh list c√°c dict
        tasks = df.to_dict('records')
        
        print("DataFrame sau khi ƒë·ªçc d·ªØ li·ªáu, l·ªçc theo ch·ªâ m·ª•c v√† ƒë·ªïi t√™n c·ªôt:")
        print(df)
        
        return {
            "success": True,
            "tasks": tasks
        }
        
    except Exception as e:
        print(f"L·ªói khi ƒë·ªçc file Excel: {str(e)}")
        return {
            "success": False,
            "message": f"L·ªói khi ƒë·ªçc file Excel: {str(e)}"
        }

def detect_api_intent(user_input):
    current_date = datetime.now()
    next_day = current_date + timedelta(days=1)
    days_until_monday = (0 - current_date.weekday() + 7) % 7
    next_monday = current_date + timedelta(days=days_until_monday)
    if next_monday.date() == current_date.date():
        next_monday += timedelta(days=7)

    days_until_friday = (4 - current_date.weekday() + 7) % 7
    next_friday = current_date + timedelta(days=days_until_friday)
    if next_friday.date() == current_date.date():
        next_friday += timedelta(days=7)

    prompt = f"""
B·∫°n l√† tr·ª£ l√Ω AI. Ph√¢n t√≠ch y√™u c·∫ßu c·ªßa ng∆∞·ªùi d√πng v√† x√°c ƒë·ªãnh intent ph√π h·ª£p.

Th√¥ng tin th·ªùi gian l√†m vi·ªác:
- L√†m vi·ªác t·ª´ th·ª© 2 ƒë·∫øn th·ª© 6
- Bu·ªïi s√°ng: 8:30 - 12:00
- Bu·ªïi chi·ªÅu: 13:30 - 17:30
- Kh√¥ng l√†m vi·ªác th·ª© 7 v√† ch·ªß nh·∫≠t

L∆∞u √Ω quan tr·ªçng v·ªÅ x·ª≠ l√Ω ng√†y th√°ng v√† gi·ªù:
- Ng√†y hi·ªán t·∫°i l√†: {current_date.strftime('%m %d %Y %H:%M')}
- ƒê·ªãnh d·∫°ng ng√†y gi·ªù tr·∫£ v·ªÅ ph·∫£i l√†: "MM DD YYYY HH:mm" (v√≠ d·ª•: "06 04 2025 08:30")
- LU√îN LU√îN s·ª≠ d·ª•ng ng√†y hi·ªán t·∫°i l√†m m·ªëc th·ªùi gian

C√°ch x·ª≠ l√Ω th·ªùi gian:
1. Khi ch·ªâ c√≥ ng√†y (v√≠ d·ª•: "mai", "th·ª© 2"):
   - N·∫øu kh√¥ng ch·ªâ ƒë·ªãnh bu·ªïi ‚Üí m·∫∑c ƒë·ªãnh l√† c·∫£ ng√†y (8:30-17:30)
   - N·∫øu ch·ªâ ƒë·ªãnh bu·ªïi s√°ng ‚Üí 8:30-12:00
   - N·∫øu ch·ªâ ƒë·ªãnh bu·ªïi chi·ªÅu ‚Üí 13:30-17:30

2. Khi c√≥ th·ªùi gian c·ª• th·ªÉ:
   - N·∫øu th·ªùi gian n·∫±m trong bu·ªïi s√°ng (8:30-12:00) ‚Üí t√≠nh l√† bu·ªïi s√°ng
   - N·∫øu th·ªùi gian n·∫±m trong bu·ªïi chi·ªÅu (13:30-17:30) ‚Üí t√≠nh l√† bu·ªïi chi·ªÅu
   - N·∫øu th·ªùi gian n·∫±m ngo√†i gi·ªù l√†m vi·ªác ‚Üí b√°o l·ªói v√† kh√¥ng tr·∫£ v·ªÅ leave_info

3. X·ª≠ l√Ω c√°c t·ª´ kh√≥a th·ªùi gian:
   - "mai" = ng√†y ti·∫øp theo
   - "h√¥m nay" = ng√†y hi·ªán t·∫°i
   - "th·ª© X" = ng√†y th·ª© X trong tu·∫ßn hi·ªán t·∫°i (n·∫øu ƒë√£ qua th√¨ t√≠nh tu·∫ßn sau)
   - "tu·∫ßn n√†y" = tu·∫ßn hi·ªán t·∫°i
   - "tu·∫ßn sau" = tu·∫ßn ti·∫øp theo
   - "th√°ng n√†y" = th√°ng hi·ªán t·∫°i
   - "th√°ng sau" = th√°ng ti·∫øp theo

4. X·ª≠ l√Ω gi·ªù:
   - "s√°ng" = 8:30-12:00
   - "chi·ªÅu" = 13:30-17:30
   - "c·∫£ ng√†y" = 8:30-17:30
   - Gi·ªù c·ª• th·ªÉ (v√≠ d·ª•: "9h", "9:00") ‚Üí gi·ªØ nguy√™n gi·ªù ƒë√≥

5. X·ª≠ l√Ω nhi·ªÅu ng√†y li√™n ti·∫øp:
   - Khi c√≥ nhi·ªÅu ng√†y (v√≠ d·ª•: "th·ª© 2, 3") ‚Üí t√≠nh t·ª´ ng√†y ƒë·∫ßu ƒë·∫øn ng√†y cu·ªëi
   - Khi c√≥ d·∫•u ph·∫©y ho·∫∑c "v√†" gi·ªØa c√°c ng√†y ‚Üí t√≠nh l√† nhi·ªÅu ng√†y li√™n ti·∫øp
   - Khi c√≥ t·ª´ "ƒë·∫øn" ho·∫∑c "t·ªõi" ‚Üí t√≠nh t·ª´ ng√†y ƒë·∫ßu ƒë·∫øn ng√†y cu·ªëi

N·∫øu c√≥ √Ω ƒë·ªãnh ngh·ªâ ph√©p v√† x√°c ƒë·ªãnh ƒë∆∞·ª£c th·ªùi gian, tr·∫£ v·ªÅ JSON d·∫°ng:
{{
  "intent": "leave_request",
  "api_url": "https://mbi.sapotacorp.vn/api/MissionAPI/SubmitReasonOffWork",
  "leave_info": {{
    "from_date": "<ng√†y b·∫Øt ƒë·∫ßu t√≠nh t·ª´ ng√†y hi·ªán t·∫°i>",
    "to_date": "<ng√†y k·∫øt th√∫c t√≠nh t·ª´ ng√†y hi·ªán t·∫°i>",
    "time_off": "<s·ªë gi·ªù ngh·ªâ>",
    "reason": "<l√Ω do ngh·ªâ>"
  }}
}}

N·∫øu c√≥ √Ω ƒë·ªãnh xu·∫•t file l∆∞∆°ng, tr·∫£ v·ªÅ JSON d·∫°ng:
{{
  "intent": "payslip_export",
  "api_url": "https://mbi.sapotacorp.vn/api/UserAPI/OutputExcelPayslip",
  "month": "<nƒÉm-th√°ng>"
}}

L∆∞u √Ω quan tr·ªçng v·ªÅ x·ª≠ l√Ω th√°ng xu·∫•t l∆∞∆°ng:
1. Khi ng∆∞·ªùi d√πng y√™u c·∫ßu xu·∫•t l∆∞∆°ng th√°ng hi·ªán t·∫°i:
   - N·∫øu ƒëang trong th√°ng hi·ªán t·∫°i (v√≠ d·ª•: ng√†y 15/3) ‚Üí tr·∫£ v·ªÅ th√°ng hi·ªán t·∫°i (2024-03)
   - N·∫øu ƒëang trong th√°ng m·ªõi (v√≠ d·ª•: ng√†y 1/4) ‚Üí tr·∫£ v·ªÅ th√°ng tr∆∞·ªõc (2024-03)
2. Khi ng∆∞·ªùi d√πng ch·ªâ ƒë·ªãnh th√°ng c·ª• th·ªÉ:
   - N·∫øu ch·ªâ c√≥ th√°ng (v√≠ d·ª•: "th√°ng 3") ‚Üí t·ª± ƒë·ªông th√™m nƒÉm hi·ªán t·∫°i (2024-03)
   - N·∫øu c√≥ c·∫£ nƒÉm (v√≠ d·ª•: "th√°ng 3/2024") ‚Üí s·ª≠ d·ª•ng ƒë√∫ng nƒÉm ƒë√≥ (2024-03)
3. Khi ng∆∞·ªùi d√πng d√πng t·ª´ kh√≥a "th√°ng n√†y":
   - N·∫øu ƒëang trong th√°ng hi·ªán t·∫°i ‚Üí tr·∫£ v·ªÅ th√°ng hi·ªán t·∫°i
   - N·∫øu ƒëang trong th√°ng m·ªõi ‚Üí tr·∫£ v·ªÅ th√°ng tr∆∞·ªõc

N·∫øu c√≥ √Ω ƒë·ªãnh xu·∫•t file point, tr·∫£ v·ªÅ JSON d·∫°ng:
{{
  "intent": "point_export",
  "api_url": "https://mbi.sapotacorp.vn/api/UserAPI/OutputExcelReportUser"
}}

N·∫øu KH√îNG c·∫ßn g·ªçi API ho·∫∑c kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c th·ªùi gian ngh·ªâ, tr·∫£ v·ªÅ:
{{
  "intent": "none",
  "api_url": "",
  "leave_info": null
}}

Danh s√°ch intent ƒë∆∞·ª£c h·ªó tr·ª£:
- "leave_request": "https://mbi.sapotacorp.vn/api/MissionAPI/SubmitReasonOffWork"
- "leave_history": "https://mbi.sapotacorp.vn/User/NghiPhep/History"
- "payslip_export": "https://mbi.sapotacorp.vn/api/UserAPI/OutputExcelPayslip"
- "point_export": "https://mbi.sapotacorp.vn/api/UserAPI/OutputExcelReportUser"
- "create_task": "https://mbi.sapotacorp.vn/api/TaskAPI/CreateTask"
- "create_tasks_from_excel": "https://mbi.sapotacorp.vn/api/TaskAPI/CreateTask"

Ph√¢n t√≠ch c√°c t·ª´ kh√≥a:
- ƒêƒÉng k√Ω ngh·ªâ, xin ngh·ªâ, t·∫°o ƒë∆°n ngh·ªâ, off ‚Üí leave_request
- Xem l·ªãch s·ª≠ ngh·ªâ, ƒë∆°n ƒë√£ g·ª≠i ‚Üí leave_history
- Xu·∫•t file l∆∞∆°ng, t·∫£i file l∆∞∆°ng ‚Üí payslip_export
- Xu·∫•t file point, t·∫£i b√°o c√°o user, xu·∫•t b√°o c√°o user ‚Üí point_export
- T·∫°o task, th√™m task, t·∫°o c√¥ng vi·ªác ‚Üí create_task
- T·∫°o task t·ª´ Excel, import task t·ª´ Excel, t·∫°o nhi·ªÅu task t·ª´ file ‚Üí create_tasks_from_excel

N·∫øu c√≥ √Ω ƒë·ªãnh t·∫°o task, tr·∫£ v·ªÅ JSON d·∫°ng:
{{
  "intent": "create_task",
  "api_url": "https://mbi.sapotacorp.vn/api/TaskAPI/CreateTask",
  "task_info": {{
    "project_id": "<id d·ª± √°n>",
    "dev_id": "<id developer>"
  }}
}}

N·∫øu c√≥ √Ω ƒë·ªãnh t·∫°o task t·ª´ file Excel, tr·∫£ v·ªÅ JSON d·∫°ng:
{{
  "intent": "create_tasks_from_excel",
  "api_url": "https://mbi.sapotacorp.vn/api/TaskAPI/CreateTask",
  "excel_info": {{
    "file_path": "<ƒë∆∞·ªùng d·∫´n file Excel>"
  }}
}}

V√≠ d·ª• v·ªÅ ph√¢n t√≠ch v√† tr·∫£ v·ªÅ JSON (S·ª≠ d·ª•ng Ng√†y hi·ªán t·∫°i: {current_date.strftime('%m %d %Y')}):

Ng∆∞·ªùi d√πng: "ngh·ªâ s√°ng mai v√¨ l√†m remote" ‚Üí
{{
  "intent": "leave_request",
  "api_url": "https://mbi.sapotacorp.vn/api/MissionAPI/SubmitReasonOffWork",
  "leave_info": {{
    "from_date": "{next_day.strftime('%m %d %Y')} 08:30",
    "to_date": "{next_day.strftime('%m %d %Y')} 12:00",
    "time_off": "4",
    "reason": "l√†m remote"}}
}}

Ng∆∞·ªùi d√πng: "xin ngh·ªâ th·ª© 5 tu·∫ßn n√†y v√¨ b·∫≠n vi·ªác gia ƒë√¨nh" (Gi·∫£ s·ª≠ Ng√†y hi·ªán t·∫°i l√† Th·ª© 2 {current_date.strftime('%m %d %Y')}) ‚Üí
{{
  "intent": "leave_request",
  "api_url": "https://mbi.sapotacorp.vn/api/MissionAPI/SubmitReasonOffWork",
  "leave_info": {{
    "from_date": "{next_friday.strftime('%m %d %Y')} 08:30",
    "to_date": "{next_friday.strftime('%m %d %Y')} 17:30",
    "time_off": "8",
    "reason": "b·∫≠n vi·ªác gia ƒë√¨nh"}}
}}

Ng∆∞·ªùi d√πng: "th·ª© 2, 3 tu·∫ßn sau t√¥i l√†m remote" ‚Üí
{{
  "intent": "leave_request",
  "api_url": "https://mbi.sapotacorp.vn/api/MissionAPI/SubmitReasonOffWork",
  "leave_info": {{
    "from_date": "{next_monday.strftime('%m %d %Y')} 08:30",
    "to_date": "{(next_monday + timedelta(days=1)).strftime('%m %d %Y')} 17:30",
    "time_off": "16",
    "reason": "l√†m remote"}}
}}

Ng∆∞·ªùi d√πng: "xu·∫•t file l∆∞∆°ng th√°ng n√†y" (Gi·∫£ s·ª≠ Ng√†y hi·ªán t·∫°i l√† {current_date.strftime('%m %d %Y')}) ‚Üí
{{
  "intent": "payslip_export",
  "api_url": "https://mbi.sapotacorp.vn/api/UserAPI/OutputExcelPayslip",
  "month": "{current_date.strftime('%Y-%m')}"
}}

Ng∆∞·ªùi d√πng: "xu·∫•t file l∆∞∆°ng th√°ng 3" ‚Üí
{{
  "intent": "payslip_export",
  "api_url": "https://mbi.sapotacorp.vn/api/UserAPI/OutputExcelPayslip",
  "month": "2024-03"
}}

Ng∆∞·ªùi d√πng: "xu·∫•t file point" ‚Üí
{{
  "intent": "point_export",
  "api_url": "https://mbi.sapotacorp.vn/api/UserAPI/OutputExcelReportUser"
}}

Ng∆∞·ªùi d√πng: "t·∫°o task ƒë·ªÉ l√†m remote" ‚Üí
{{
  "intent": "create_task",
  "api_url": "https://mbi.sapotacorp.vn/api/TaskAPI/CreateTask",
  "task_info": {{
    "project_id": "<id d·ª± √°n>",
    "dev_id": "<id developer>"
  }}
}}

Ng∆∞·ªùi d√πng: "t·∫°o task t·ª´ Excel" ‚Üí
{{
  "intent": "create_tasks_from_excel",
  "api_url": "https://mbi.sapotacorp.vn/api/TaskAPI/CreateTask",
  "excel_info": {{
    "file_path": "<ƒë∆∞·ªùng d·∫´n file Excel>"
  }}
}}

C√¢u ng∆∞·ªùi d√πng: "{user_input}"
Ch·ªâ tr·∫£ v·ªÅ JSON, kh√¥ng gi·∫£i th√≠ch.
"""
    raw_response = get_response(prompt)
    response = clean_response(raw_response)

    try:
        parsed = json.loads(response)
        if parsed.get("intent") == "leave_request" and parsed.get("leave_info"):
             leave_info = parsed["leave_info"]
             from_date = leave_info.get("from_date")
             to_date = leave_info.get("to_date")
             if from_date and to_date:
                hours = calculate_leave_hours(from_date, to_date)
                leave_info["time_off"] = str(hours)
                parsed["leave_info"] = leave_info
             else:
                 parsed["intent"] = "none"
                 parsed["api_url"] = ""
                 parsed["leave_info"] = None

        return json.dumps(parsed)
    except Exception as e:
        print(f"L·ªói ph√¢n t√≠ch JSON ho·∫∑c x·ª≠ l√Ω kh√°c trong detect_api_intent: {e}")
        return json.dumps({ "intent": "none", "api_url": "", "leave_info": None })

def chat_response(user_input):
    prompt = f"B·∫°n l√† m·ªôt tr·ª£ l√Ω AI th√¢n thi·ªán. Tr·∫£ l·ªùi ng∆∞·ªùi d√πng t·ª± nhi√™n: {user_input}"
    return get_response(prompt)

if __name__ == "__main__":
    print("ü§ñ Chatbot ƒë√£ s·∫µn s√†ng! (G√µ 'exit' ƒë·ªÉ tho√°t)")
    while True:
        user_input = input("\nüë§ B·∫°n: ")
        if user_input.lower() == "exit":
            break

        intent_result = detect_api_intent(user_input)

        try:
            parsed = json.loads(intent_result)
            if parsed.get("intent") == "none":
                reply = chat_response(user_input)
                print(f"\nü§ñ {reply}")
            else:
                print("\nü§ñ Ph√¢n t√≠ch y√™u c·∫ßu API:")
                print(json.dumps(parsed, indent=2, ensure_ascii=False))
        except json.JSONDecodeError:
            print("ü§ñ Kh√¥ng hi·ªÉu r√µ √Ω ƒë·ªãnh. ƒêang tr·∫£ l·ªùi b√¨nh th∆∞·ªùng...")
            reply = chat_response(user_input)
            print(f"\nü§ñ {reply}")
