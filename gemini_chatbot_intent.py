import google.generativeai as genai
import json
import requests
from datetime import datetime, timedelta

genai.configure(api_key="AIzaSyB8d5o2veAopoa5FlcVxKqm3z8LNkP19Zk")
model = genai.GenerativeModel('models/gemini-2.0-flash')
chat = model.start_chat()

def extract_important_info(url, html_content, city=None):
    """Extract important information based on API type"""
    if "nghiphep/history" in url.lower():  
        return {
            "type": "link",
            "url": url,
            "title": "üìã Xem l·ªãch s·ª≠ ngh·ªâ ph√©p",
            "message": 
                """üìä T·∫°i trang l·ªãch s·ª≠ ngh·ªâ ph√©p, b·∫°n s·∫Ω th·∫•y:
- Danh s√°ch t·∫•t c·∫£ ƒë∆°n ngh·ªâ ph√©p ƒë√£ g·ª≠i
- Th·ªùi gian v√† s·ªë ng√†y ngh·ªâ c·ªßa t·ª´ng ƒë∆°n
- Tr·∫°ng th√°i ph√™ duy·ªát (ƒê√£ duy·ªát/ƒêang ch·ªù/T·ª´ ch·ªëi)
- Ng∆∞·ªùi ph√™ duy·ªát v√† th·ªùi gian ph√™ duy·ªát
                """
        }
            
    elif "nghiphep/balance" in url.lower():  
        return {
            "type": "link",
            "url": url,
            "title": "üóìÔ∏è Xem s·ªë ng√†y ngh·ªâ c√≤n l·∫°i",
            "message": 
                """üìÖ Th√¥ng tin s·ªë ng√†y ngh·ªâ:
- T·ªïng s·ªë ng√†y ngh·ªâ ph√©p nƒÉm
- S·ªë ng√†y ƒë√£ s·ª≠ d·ª•ng
- S·ªë ng√†y c√≤n l·∫°i
- Th·ªëng k√™ theo lo·∫°i ngh·ªâ ph√©p
                """
        }
            
    elif "project/progress" in url:  
        try:
            data = json.loads(html_content)
            return f"""
üìä T√™n d·ª± √°n: {data.get('project_name', 'N/A')}
üìà Ti·∫øn ƒë·ªô: {data.get('progress', '0')}%
‚è∞ Deadline: {data.get('deadline', 'N/A')}
üìå Tr·∫°ng th√°i: {data.get('status', 'N/A')}
""".strip()
        except:
            return html_content
            
    elif "salary" in url:  
        try:
            data = json.loads(html_content)
            return f"""
üí∞ L∆∞∆°ng c∆° b·∫£n: {int(data.get('base_salary', 0)):,} VND
üéÅ Th∆∞·ªüng: {int(data.get('bonus', 0)):,} VND
üíµ T·ªïng thu nh·∫≠p: {int(data.get('total', 0)):,} VND
üìÖ K·ª≥ l∆∞∆°ng: {data.get('period', 'N/A')}
""".strip()
        except:
            return html_content
    
    return html_content

def call_real_api(api_url, user_input=None):
    try:
        response = requests.get(api_url, timeout=5)
        if response.status_code == 200:
            return extract_important_info(api_url, response.text)
        else:
            return f"‚ùå L·ªói {response.status_code}: {response.text}"
    except Exception as e:
        return f"‚ùå L·ªói khi g·ªçi API: {str(e)}"

def get_response(prompt):
    try:
        response = chat.send_message(prompt)
        return response.text.strip() if response.text else None
    except Exception as e:
        print(f"L·ªói khi g·ªçi Gemini: {str(e)}")
        return None

def clean_response(response):
    if not response:
        return ""
    response = response.strip()
    if response.startswith('```') and response.endswith('```'):
        response = response[3:-3]
    if response.lower().startswith('json'):
        response = response[4:]
    return response.strip()

def get_working_hours(date):
    """
    Tr·∫£ v·ªÅ th·ªùi gian l√†m vi·ªác cho m·ªôt ng√†y c·ª• th·ªÉ
    Returns: (start_time, end_time) ho·∫∑c None n·∫øu l√† cu·ªëi tu·∫ßn
    """
    if date.weekday() >= 5:  
        return None
        
    morning_start = datetime.combine(date.date(), datetime.strptime("08:30", "%H:%M").time())
    morning_end = datetime.combine(date.date(), datetime.strptime("12:00", "%H:%M").time())
    
    afternoon_start = datetime.combine(date.date(), datetime.strptime("13:30", "%H:%M").time())
    afternoon_end = datetime.combine(date.date(), datetime.strptime("17:30", "%H:%M").time())
    
    return {
        "morning": (morning_start, morning_end),
        "afternoon": (afternoon_start, afternoon_end)
    }

def calculate_leave_hours(from_date, to_date):
    """
    T√≠nh s·ªë gi·ªù ngh·ªâ d·ª±a tr√™n th·ªùi gian l√†m vi·ªác
    """
    if not from_date or not to_date:
        return 0
        
    try:
        start = datetime.strptime(from_date, "%m %d %Y %H:%M")
        end = datetime.strptime(to_date, "%m %d %Y %H:%M")
        
        if end < start:
            return 0
            
        total_hours = 0
        current = start
        
        while current.date() <= end.date():
            working_hours = get_working_hours(current)
            
            if working_hours:
                morning_start, morning_end = working_hours["morning"]
                afternoon_start, afternoon_end = working_hours["afternoon"]
                
                if current.date() == start.date():
                    morning_start = max(morning_start, start)
                if current.date() == end.date():
                    morning_end = min(morning_end, end)
                    
                if morning_start < morning_end:
                    total_hours += (morning_end - morning_start).total_seconds() / 3600
                
                if current.date() == start.date():
                    afternoon_start = max(afternoon_start, start)
                if current.date() == end.date():
                    afternoon_end = min(afternoon_end, end)
                    
                if afternoon_start < afternoon_end:
                    total_hours += (afternoon_end - afternoon_start).total_seconds() / 3600
            
            current += timedelta(days=1)
            
        return int(round(total_hours))
    except Exception as e:
        print(f"Error calculating leave hours: {str(e)}")
        return 0

def detect_api_intent(user_input):
    current_date = datetime.now()
    # Calculate next day and next Monday/Friday for examples
    next_day = current_date + timedelta(days=1)
    # Find the next Monday and Friday
    days_until_monday = (0 - current_date.weekday() + 7) % 7
    next_monday = current_date + timedelta(days=days_until_monday)
    if next_monday.date() == current_date.date(): # If today is Monday, find next Monday
        next_monday += timedelta(days=7)
    
    days_until_friday = (4 - current_date.weekday() + 7) % 7
    next_friday = current_date + timedelta(days=days_until_friday)
    if next_friday.date() == current_date.date(): # If today is Friday, find next Friday
        next_friday += timedelta(days=7)
        
    prompt = f"""
B·∫°n l√† tr·ª£ l√Ω AI. Ph√¢n t√≠ch y√™u c·∫ßu c·ªßa ng∆∞·ªùi d√πng v√† x√°c ƒë·ªãnh intent ph√π h·ª£p.

Th√¥ng tin th·ªùi gian l√†m vi·ªác:
- L√†m vi·ªác t·ª´ th·ª© 2 ƒë·∫øn th·ª© 6
- Bu·ªïi s√°ng: 8:30 - 12:00
- Bu·ªïi chi·ªÅu: 13:30 - 17:30
- Kh√¥ng l√†m vi·ªác th·ª© 7 v√† ch·ªß nh·∫≠t

L∆∞u √Ω quan tr·ªçng v·ªÅ x·ª≠ l√Ω ng√†y th√°ng:
- LU√îN LU√îN s·ª≠ d·ª•ng "Ng√†y hi·ªán t·∫°i l√†: {current_date.strftime('%m %d %Y %H:%M')}" l√†m m·ªëc th·ªùi gian ƒë·ªÉ suy lu·∫≠n c√°c m·ªëc th·ªùi gian t∆∞∆°ng ƒë·ªëi nh∆∞ "h√¥m nay", "mai", "tu·∫ßn sau", "th·ª© 2", v.v.
- ƒê·ªãnh d·∫°ng ng√†y gi·ªù tr·∫£ v·ªÅ ph·∫£i l√†: "MM DD YYYY HH:mm" (v√≠ d·ª•: "05 27 2024 08:30")

C√°ch x·ª≠ l√Ω th·ªùi gian:
1. Khi ch·ªâ c√≥ ng√†y (v√≠ d·ª•: "mai", "th·ª© 2"):
   - N·∫øu kh√¥ng ch·ªâ ƒë·ªãnh bu·ªïi ‚Üí m·∫∑c ƒë·ªãnh l√† c·∫£ ng√†y (8:30-17:30)
   - N·∫øu ch·ªâ ƒë·ªãnh bu·ªïi s√°ng ‚Üí 8:30-12:00
   - N·∫øu ch·ªâ ƒë·ªãnh bu·ªïi chi·ªÅu ‚Üí 13:30-17:30

2. Khi c√≥ th·ªùi gian c·ª• th·ªÉ:
   - N·∫øu th·ªùi gian n·∫±m trong bu·ªïi s√°ng (8:30-12:00) ‚Üí t√≠nh l√† bu·ªïi s√°ng
   - N·∫øu th·ªùi gian n·∫±m trong bu·ªïi chi·ªÅu (13:30-17:30) ‚Üí t√≠nh l√† bu·ªïi chi·ªÅu
   - N·∫øu th·ªùi gian n·∫±m ngo√†i gi·ªù l√†m vi·ªác ‚Üí b√°o l·ªói v√† kh√¥ng tr·∫£ v·ªÅ leave_info

N·∫øu c√≥ √Ω ƒë·ªãnh ngh·ªâ ph√©p v√† x√°c ƒë·ªãnh ƒë∆∞·ª£c th·ªùi gian, tr·∫£ v·ªÅ JSON d·∫°ng:
{{
  "intent": "leave_request",
  "api_url": "https://mbi.sapotacorp.vn/api/MissionAPI/SubmitReasonOffWork",
  "leave_info": {{
    "from_date": "<ng√†y b·∫Øt ƒë·∫ßu t√≠nh t·ª´ ng√†y hi·ªán t·∫°i>",
    "to_date": "<ng√†y k·∫øt th√∫c t√≠nh t·ª´ ng√†y hi·ªán t·∫°i>",
    "time_off": "<s·ªë gi·ªù ngh·ªâ>",
    "reason": "<l√Ω do ngh·ªâ>"
  }}
}}

N·∫øu KH√îNG c·∫ßn g·ªçi API ho·∫∑c kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c th·ªùi gian ngh·ªâ, tr·∫£ v·ªÅ:
{{
  "intent": "none",
  "api_url": "",
  "leave_info": null
}}

Danh s√°ch intent ƒë∆∞·ª£c h·ªó tr·ª£:
- "leave_request": "https://mbi.sapotacorp.vn/api/MissionAPI/SubmitReasonOffWork"
- "leave_history": "https://mbi.sapotacorp.vn/User/NghiPhep/History"
- "leave_balance": "https://mbi.sapotacorp.vn/User/NghiPhep/Balance"

Ph√¢n t√≠ch c√°c t·ª´ kh√≥a:
- ƒêƒÉng k√Ω ngh·ªâ, xin ngh·ªâ, t·∫°o ƒë∆°n ngh·ªâ ‚Üí leave_request
- Xem l·ªãch s·ª≠ ngh·ªâ, ƒë∆°n ƒë√£ g·ª≠i ‚Üí leave_history
- S·ªë ng√†y ngh·ªâ c√≤n l·∫°i ‚Üí leave_balance

V√≠ d·ª• v·ªÅ ph√¢n t√≠ch v√† tr·∫£ v·ªÅ JSON (S·ª≠ d·ª•ng Ng√†y hi·ªán t·∫°i: {current_date.strftime('%m %d %Y')}):

Ng∆∞·ªùi d√πng: "ngh·ªâ s√°ng mai v√¨ b·ªã c·∫£m" ‚Üí 
{{
  "intent": "leave_request",
  "api_url": "https://mbi.sapotacorp.vn/api/MissionAPI/SubmitReasonOffWork",
  "leave_info": {{
    "from_date": "{next_day.strftime('%m %d %Y')} 08:30",
    "to_date": "{next_day.strftime('%m %d %Y')} 12:00",
    "time_off": "4",
    "reason": "b·ªã c·∫£m"
  }}
}}

Ng∆∞·ªùi d√πng: "ngh·ªâ c·∫£ tu·∫ßn sau" ‚Üí 
{{
  "intent": "leave_request",
  "api_url": "https://mbi.sapotacorp.vn/api/MissionAPI/SubmitReasonOffWork",
  "leave_info": {{
    "from_date": "{next_monday.strftime('%m %d %Y')} 13:30",
    "to_date": "{next_monday.strftime('%m %d %Y')} 17:30",
    "time_off": "38",
    "reason": ""
  }}
}}

Ng∆∞·ªùi d√πng: "ngh·ªâ c·∫£ ng√†y h√¥m nay" ‚Üí 
{{
  "intent": "leave_request",
  "api_url": "https://mbi.sapotacorp.vn/api/MissionAPI/SubmitReasonOffWork",
  "leave_info": {{
    "from_date": "{current_date.strftime('%m %d %Y')} 08:30",
    "to_date": "{current_date.strftime('%m %d %Y')} 17:30",
    "time_off": "8",
    "reason": ""
  }}
}}

C√¢u ng∆∞·ªùi d√πng: "{user_input}"
Ch·ªâ tr·∫£ v·ªÅ JSON, kh√¥ng gi·∫£i th√≠ch.
"""
    raw_response = get_response(prompt)
    response = clean_response(raw_response)
    
    try:
        parsed = json.loads(response)
        # Only calculate hours if leave_info exists and dates are present
        if parsed.get("intent") == "leave_request" and parsed.get("leave_info"):
             leave_info = parsed["leave_info"]
             from_date = leave_info.get("from_date")
             to_date = leave_info.get("to_date")
             if from_date and to_date:
                hours = calculate_leave_hours(from_date, to_date)
                leave_info["time_off"] = str(hours)
                parsed["leave_info"] = leave_info # Update parsed with calculated hours
             else:
                 # If dates are missing, set intent to none
                 parsed["intent"] = "none"
                 parsed["api_url"] = ""
                 parsed["leave_info"] = None

        return json.dumps(parsed)
    except:
        # If JSON parsing fails or any other error, return intent none
        return json.dumps({ "intent": "none", "api_url": "", "leave_info": None })

def chat_response(user_input):
    prompt = f"B·∫°n l√† m·ªôt tr·ª£ l√Ω AI th√¢n thi·ªán. Tr·∫£ l·ªùi ng∆∞·ªùi d√πng t·ª± nhi√™n: {user_input}"
    return get_response(prompt)

if __name__ == "__main__":
    print("ü§ñ Chatbot ƒë√£ s·∫µn s√†ng! (G√µ 'exit' ƒë·ªÉ tho√°t)")
    while True:
        user_input = input("\nüë§ B·∫°n: ")
        if user_input.lower() == "exit":
            break

        intent_result = detect_api_intent(user_input)

        try:
            parsed = json.loads(intent_result)
            if parsed.get("intent") == "none":
                reply = chat_response(user_input)
                print(f"\nü§ñ {reply}")
            else:
                print("\nü§ñ Ph√¢n t√≠ch y√™u c·∫ßu API:")
                print(json.dumps(parsed, indent=2, ensure_ascii=False))
        except json.JSONDecodeError:
            print("ü§ñ Kh√¥ng hi·ªÉu r√µ √Ω ƒë·ªãnh. ƒêang tr·∫£ l·ªùi b√¨nh th∆∞·ªùng...")
            reply = chat_response(user_input)
            print(f"\nü§ñ {reply}")
